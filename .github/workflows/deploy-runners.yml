name: Deploy GitHub Runners

on:
  workflow_dispatch:
    inputs:
      min_runners:
        description: 'Minimum number of runners'
        required: false
        default: '2'
        type: choice
        options:
          - '0'
          - '1'
          - '2'
          - '3'
          - '4'
      max_runners:
        description: 'Maximum number of runners'
        required: false
        default: '4'
        type: choice
        options:
          - '1'
          - '2'
          - '4'
          - '6'
          - '8'
          - '10'
      runner_image:
        description: 'Runner image to deploy'
        required: false
        default: 'registry.digitalocean.com/redducklabs/github-runner:latest'
        type: string
      namespace:
        description: 'Kubernetes namespace'
        required: false
        default: 'arc-runners'
        type: string

env:
  CLUSTER_CONTEXT: ${{ vars.CLUSTER_CONTEXT || 'do-sfo3-redducklabs-cluster' }}
  RELEASE_NAME: ${{ vars.RELEASE_NAME || 'redducklabs-runners' }}
  RUNNER_SCALE_SET_NAME: ${{ vars.RUNNER_SCALE_SET_NAME || 'redducklabs-runners' }}
  REGISTRY: ${{ vars.REGISTRY || 'registry.digitalocean.com' }}
  REPOSITORY: ${{ vars.REPOSITORY || 'redducklabs/github-runner' }}

# Use minimal permissions
permissions:
  contents: read
  id-token: write

jobs:
  validate-inputs:
    name: Validate Deployment Inputs
    runs-on: ubuntu-latest
    outputs:
      min_runners: ${{ steps.validate.outputs.min_runners }}
      max_runners: ${{ steps.validate.outputs.max_runners }}
      runner_image: ${{ steps.validate.outputs.runner_image }}
      namespace: ${{ steps.validate.outputs.namespace }}
    
    steps:
      - name: Validate and sanitize inputs
        id: validate
        run: |
          echo "üîç Validating deployment inputs..."
          
          # Validate numeric inputs
          MIN_RUNNERS="${{ github.event.inputs.min_runners }}"
          MAX_RUNNERS="${{ github.event.inputs.max_runners }}"
          NAMESPACE="${{ github.event.inputs.namespace }}"
          RUNNER_IMAGE="${{ github.event.inputs.runner_image }}"
          
          # Validate min_runners is numeric
          if ! [[ "${MIN_RUNNERS}" =~ ^[0-9]+$ ]]; then
            echo "‚ùå Error: min_runners must be a number"
            exit 1
          fi
          
          # Validate max_runners is numeric
          if ! [[ "${MAX_RUNNERS}" =~ ^[0-9]+$ ]]; then
            echo "‚ùå Error: max_runners must be a number"
            exit 1
          fi
          
          # Validate min <= max
          if [ "${MIN_RUNNERS}" -gt "${MAX_RUNNERS}" ]; then
            echo "‚ùå Error: min_runners (${MIN_RUNNERS}) cannot be greater than max_runners (${MAX_RUNNERS})"
            exit 1
          fi
          
          # Validate namespace format (DNS-1123 label)
          if ! [[ "${NAMESPACE}" =~ ^[a-z0-9]([-a-z0-9]*[a-z0-9])?$ ]]; then
            echo "‚ùå Error: namespace must be a valid DNS-1123 label"
            exit 1
          fi
          
          # Validate runner image format
          if ! [[ "${RUNNER_IMAGE}" =~ ^[a-z0-9._/-]+:[a-z0-9._-]+$ ]]; then
            echo "‚ùå Error: runner_image must be a valid container image reference"
            exit 1
          fi
          
          # Set validated outputs
          echo "min_runners=${MIN_RUNNERS}" >> $GITHUB_OUTPUT
          echo "max_runners=${MAX_RUNNERS}" >> $GITHUB_OUTPUT
          echo "runner_image=${RUNNER_IMAGE}" >> $GITHUB_OUTPUT
          echo "namespace=${NAMESPACE}" >> $GITHUB_OUTPUT
          
          echo "‚úÖ All inputs validated successfully"
          echo "  Min runners: ${MIN_RUNNERS}"
          echo "  Max runners: ${MAX_RUNNERS}"
          echo "  Namespace: ${NAMESPACE}"
          echo "  Runner image: ${RUNNER_IMAGE}"

  deploy:
    name: Deploy Self-Hosted Runners
    runs-on: ubuntu-latest
    needs: validate-inputs
    timeout-minutes: 15
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup infrastructure tools
        uses: ./.github/actions/setup-tools
        with:
          install-jq: 'true'
      
      - name: Validate GitHub Token
        run: |
          echo "üîê Validating GitHub token permissions..."
          
          # Check if RUNNER_TOKEN secret is set
          if [ -z "${{ secrets.RUNNER_TOKEN }}" ]; then
            echo "‚ùå Error: RUNNER_TOKEN secret is not set!"
            echo "Please add RUNNER_TOKEN secret with 'admin:org' and 'repo' scopes"
            exit 1
          fi
          
          # Validate token permissions with retry logic
          for attempt in 1 2 3; do
            echo "Attempt ${attempt}/3: Validating token..."
            RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" \
              -H "Authorization: token ${{ secrets.RUNNER_TOKEN }}" \
              https://api.github.com/user)
            
            if [ "${RESPONSE}" = "200" ]; then
              echo "‚úÖ GitHub token validated successfully"
              break
            elif [ "${attempt}" = "3" ]; then
              echo "‚ùå Error: RUNNER_TOKEN is invalid or expired (HTTP ${RESPONSE})"
              exit 1
            else
              echo "‚ö†Ô∏è Token validation failed (HTTP ${RESPONSE}), retrying in 5s..."
              sleep 5
            fi
          done
      
      - name: Configure DigitalOcean access
        run: |
          echo "üîß Configuring DigitalOcean access..."
          
          # Validate DO_TOKEN
          if [ -z "${{ secrets.DO_TOKEN }}" ]; then
            echo "‚ùå Error: DO_TOKEN secret is not set!"
            exit 1
          fi
          
          # Initialize doctl with retry logic
          for attempt in 1 2 3; do
            echo "Attempt ${attempt}/3: Configuring doctl..."
            if doctl auth init --access-token "${{ secrets.DO_TOKEN }}"; then
              echo "‚úÖ DigitalOcean authentication configured"
              break
            elif [ "${attempt}" = "3" ]; then
              echo "‚ùå Error: Failed to authenticate with DigitalOcean"
              exit 1
            else
              echo "‚ö†Ô∏è Authentication failed, retrying in 5s..."
              sleep 5
            fi
          done
          
          # Configure kubectl with retry logic
          echo "Configuring kubectl for cluster ${CLUSTER_CONTEXT}..."
          for attempt in 1 2 3; do
            echo "Attempt ${attempt}/3: Configuring kubectl..."
            if doctl kubernetes cluster kubeconfig save "${CLUSTER_CONTEXT}"; then
              kubectl config use-context "${CLUSTER_CONTEXT}"
              echo "‚úÖ Kubernetes access configured"
              break
            elif [ "${attempt}" = "3" ]; then
              echo "‚ùå Error: Failed to configure kubectl"
              exit 1
            else
              echo "‚ö†Ô∏è kubectl configuration failed, retrying in 5s..."
              sleep 5
            fi
          done
      
      - name: Create namespace if not exists
        run: |
          echo "üìÅ Ensuring namespace exists..."
          NAMESPACE="${{ needs.validate-inputs.outputs.namespace }}"
          
          if ! kubectl get namespace "${NAMESPACE}" &>/dev/null; then
            echo "Creating namespace: ${NAMESPACE}"
            kubectl create namespace "${NAMESPACE}"
          else
            echo "Namespace ${NAMESPACE} already exists"
          fi
      
      - name: Configure registry access
        run: |
          echo "üîê Configuring registry access..."
          NAMESPACE="${{ needs.validate-inputs.outputs.namespace }}"
          
          # Check if registry secret exists
          if ! kubectl get secret do-registry-secret -n "${NAMESPACE}" &>/dev/null; then
            echo "Creating registry secret..."
            doctl registry kubernetes-manifest | kubectl apply -n "${NAMESPACE}" -f -
            
            # Wait for secret to be created
            kubectl wait --for=condition=complete \
              --timeout=30s \
              secret/do-registry-secret \
              -n "${NAMESPACE}" || echo "Secret may take time to propagate"
          else
            echo "Registry secret already exists"
          fi
      
      - name: Check for existing ARC controller
        id: check-controller
        run: |
          echo "üîç Checking for Actions Runner Controller..."
          
          if helm list -n arc-systems 2>/dev/null | grep -q arc; then
            echo "controller_exists=true" >> $GITHUB_OUTPUT
            echo "‚úÖ ARC controller found"
            
            # Check controller health
            if kubectl get pods -n arc-systems -l app.kubernetes.io/name=gha-rs-controller --no-headers | grep -q Running; then
              echo "‚úÖ ARC controller is running"
            else
              echo "‚ö†Ô∏è ARC controller pods may not be ready"
            fi
          else
            echo "controller_exists=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è ARC controller not found - will install"
          fi
      
      - name: Install ARC controller if needed
        if: steps.check-controller.outputs.controller_exists == 'false'
        run: |
          echo "üì¶ Installing Actions Runner Controller..."
          
          # Create namespace first
          kubectl create namespace arc-systems --dry-run=client -o yaml | kubectl apply -f -
          
          # Install with retry logic
          for attempt in 1 2 3; do
            echo "Attempt ${attempt}/3: Installing ARC controller..."
            if helm install arc \
              --namespace arc-systems \
              --create-namespace \
              oci://ghcr.io/actions/actions-runner-controller-charts/gha-runner-scale-set-controller \
              --version 0.12.1 \
              --wait \
              --timeout 300s; then
              
              echo "‚úÖ ARC controller installed successfully"
              break
            elif [ "${attempt}" = "3" ]; then
              echo "‚ùå Error: Failed to install ARC controller"
              exit 1
            else
              echo "‚ö†Ô∏è Installation failed, retrying in 10s..."
              sleep 10
            fi
          done
          
          echo "‚è≥ Waiting for controller to be ready..."
          kubectl wait --for=condition=ready pod \
            -l app.kubernetes.io/name=gha-rs-controller \
            -n arc-systems \
            --timeout=300s
      
      - name: Prepare values file
        run: |
          echo "üìù Preparing Helm values..."
          
          # Use validated inputs
          MIN_RUNNERS="${{ needs.validate-inputs.outputs.min_runners }}"
          MAX_RUNNERS="${{ needs.validate-inputs.outputs.max_runners }}"
          RUNNER_IMAGE="${{ needs.validate-inputs.outputs.runner_image }}"
          
          cat > /tmp/runner-values.yaml <<EOF
          githubConfigUrl: "https://github.com/${{ github.repository_owner }}"
          githubConfigSecret:
            github_token: "${{ secrets.RUNNER_TOKEN }}"
          
          minRunners: ${MIN_RUNNERS}
          maxRunners: ${MAX_RUNNERS}
          
          runnerScaleSetName: "${RUNNER_SCALE_SET_NAME}"
          
          containerMode:
            type: "dind"
          
          template:
            spec:
              imagePullSecrets:
              - name: do-registry-secret
              
              containers:
              - name: runner
                image: ${RUNNER_IMAGE}
                imagePullPolicy: Always
                command: ["/home/runner/run.sh"]
                
                resources:
                  limits:
                    cpu: "2"
                    memory: "4Gi"
                  requests:
                    cpu: "500m"
                    memory: "1Gi"
                
                securityContext:
                  runAsUser: 1001
                  runAsGroup: 121
                  allowPrivilegeEscalation: false
                  readOnlyRootFilesystem: false
                  capabilities:
                    drop:
                    - ALL
          EOF
          
          echo "Values file prepared with security constraints"
      
      - name: Deploy runners
        run: |
          echo "üöÄ Deploying GitHub runners..."
          NAMESPACE="${{ needs.validate-inputs.outputs.namespace }}"
          
          # Deploy with retry logic
          for attempt in 1 2 3; do
            echo "Attempt ${attempt}/3: Deploying runners..."
            if helm upgrade --install "${RELEASE_NAME}" \
              oci://ghcr.io/actions/actions-runner-controller-charts/gha-runner-scale-set \
              --namespace "${NAMESPACE}" \
              --values /tmp/runner-values.yaml \
              --version 0.12.1 \
              --wait \
              --timeout 300s; then
              
              echo "‚úÖ Runners deployed successfully"
              break
            elif [ "${attempt}" = "3" ]; then
              echo "‚ùå Error: Failed to deploy runners"
              echo "Checking deployment status..."
              helm status "${RELEASE_NAME}" -n "${NAMESPACE}" || true
              kubectl get pods -n "${NAMESPACE}" || true
              exit 1
            else
              echo "‚ö†Ô∏è Deployment failed, retrying in 10s..."
              sleep 10
            fi
          done
      
      - name: Verify deployment
        run: |
          echo "‚úÖ Deployment complete! Checking runner status..."
          NAMESPACE="${{ needs.validate-inputs.outputs.namespace }}"
          
          echo ""
          echo "üìä Runner pods:"
          kubectl get pods -n "${NAMESPACE}" -l runner-deployment-name="${RELEASE_NAME}"
          
          echo ""
          echo "üìà Runner scale set:"
          kubectl get runners.actions.github.com -n "${NAMESPACE}" 2>/dev/null || echo "Runner CRDs not yet available"
          
          echo ""
          echo "üéØ To use these runners in your workflows, add:"
          echo "  runs-on: ${RUNNER_SCALE_SET_NAME}"
      
      - name: Check GitHub registration
        continue-on-error: true
        run: |
          echo ""
          echo "üîç Checking GitHub registration..."
          
          # Extract org from repository owner
          ORG="${{ github.repository_owner }}"
          
          # Check with retry logic
          for attempt in 1 2 3; do
            RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.RUNNER_TOKEN }}" \
              "https://api.github.com/orgs/${ORG}/actions/runners" 2>/dev/null)
            
            if [ $? -eq 0 ]; then
              RUNNERS=$(echo "${RESPONSE}" | jq '.total_count // 0' 2>/dev/null)
              if [ "${RUNNERS}" != "null" ] && [ "${RUNNERS}" != "0" ]; then
                echo "‚úÖ Found ${RUNNERS} runner(s) registered with GitHub"
                break
              fi
            fi
            
            if [ "${attempt}" = "3" ]; then
              echo "‚ö†Ô∏è Could not verify GitHub registration (may take a few minutes to appear)"
            else
              echo "Retrying GitHub API check..."
              sleep 5
            fi
          done
      
      - name: Summary
        if: always()
        run: |
          echo "## üéâ Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ **Successfully deployed GitHub runners!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- **Runner Label**: \`${RUNNER_SCALE_SET_NAME}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Namespace**: \`${{ needs.validate-inputs.outputs.namespace }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Min Runners**: ${{ needs.validate-inputs.outputs.min_runners }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Max Runners**: ${{ needs.validate-inputs.outputs.max_runners }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Image**: \`${{ needs.validate-inputs.outputs.runner_image }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Usage" >> $GITHUB_STEP_SUMMARY
          echo "Add this to your workflow:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`yaml" >> $GITHUB_STEP_SUMMARY
          echo "jobs:" >> $GITHUB_STEP_SUMMARY
          echo "  build:" >> $GITHUB_STEP_SUMMARY
          echo "    runs-on: ${RUNNER_SCALE_SET_NAME}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Security Features" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Input validation and sanitization" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Checksum verified tool downloads" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Minimal container security context" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Retry logic for network operations" >> $GITHUB_STEP_SUMMARY