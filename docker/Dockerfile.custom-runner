# Use the official GitHub Actions runner as base
# Note: Container runtime tools (containerd, docker-proxy, dockerd, runc) from base image
# CVE-2025-47907 affects these components - monitoring for updated base image releases
FROM ghcr.io/actions/actions-runner:latest

# Switch to root to install tools
USER root

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=Etc/UTC

# Update and install basic dependencies
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    curl wget git build-essential \
    libpq-dev gettext-base \
    ca-certificates gnupg lsb-release \
    software-properties-common \
    apt-transport-https \
    jq zip unzip tar gzip \
    sudo && \
    rm -rf /var/lib/apt/lists/*

# Install Python 3.13
RUN add-apt-repository -y ppa:deadsnakes/ppa && \
    apt-get update && \
    apt-get install -y python3.13 python3.13-dev python3.13-venv && \
    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.13 1 && \
    update-alternatives --install /usr/bin/python python /usr/bin/python3.13 1 && \
    rm -rf /var/lib/apt/lists/*

# Install pip for Python 3.13
RUN python3.13 -m ensurepip && \
    python3.13 -m pip install --upgrade pip setuptools wheel

# Install Node.js 22.x and npm (Security Update - fixes CVE-2024-21538)
# Using latest Node.js 22.x LTS with updated cross-spawn dependency
RUN curl -fsSL https://deb.nodesource.com/setup_22.x | bash - && \
    apt-get install -y nodejs && \
    npm install -g npm@latest pnpm@latest && \
    rm -rf /var/lib/apt/lists/*

# Install Go 1.24.6 for building kubectl from source (fixes CVE-2025-47907)
RUN wget https://go.dev/dl/go1.24.6.linux-amd64.tar.gz && \
    tar -C /usr/local -xzf go1.24.6.linux-amd64.tar.gz && \
    rm go1.24.6.linux-amd64.tar.gz

# Set Go environment variables for kubectl build
ENV PATH=$PATH:/usr/local/go/bin
ENV GOPATH=/tmp/go-kubectl
ENV GOCACHE=/tmp/go-kubectl-cache

# Build kubectl 1.33.3 from source with secure Go 1.24.6+ (fixes CVE-2025-47907)
RUN mkdir -p $GOPATH/src && \
    cd $GOPATH/src && \
    git clone --depth 1 --branch v1.33.3 https://github.com/kubernetes/kubernetes.git && \
    cd kubernetes && \
    go mod download && \
    CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags="-w -s" -o kubectl ./cmd/kubectl && \
    mv kubectl /usr/local/bin/kubectl && \
    chmod +x /usr/local/bin/kubectl && \
    cd / && \
    rm -rf $GOPATH $GOCACHE

# Clean up Go installation after building kubectl
RUN rm -rf /usr/local/go

# Install Helm 3.18.6 (Security Update - fixes CVE-2025-55199 & CVE-2025-55198)
RUN curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 && \
    chmod 700 get_helm.sh && \
    DESIRED_VERSION=v3.18.6 ./get_helm.sh && \
    rm get_helm.sh

# Install Go 1.24.6 for building doctl from source (fixes CVE-2025-47907)
RUN wget https://go.dev/dl/go1.24.6.linux-amd64.tar.gz && \
    tar -C /usr/local -xzf go1.24.6.linux-amd64.tar.gz && \
    rm go1.24.6.linux-amd64.tar.gz

# Set Go environment variables for doctl build
ENV PATH=$PATH:/usr/local/go/bin
ENV GOPATH=/tmp/go-doctl
ENV GOCACHE=/tmp/go-doctl-cache

# Build doctl 1.139.0 from source with secure Go 1.24.6+ (fixes CVE-2025-47907)
RUN mkdir -p $GOPATH/src && \
    cd $GOPATH/src && \
    git clone --depth 1 --branch v1.139.0 https://github.com/digitalocean/doctl.git && \
    cd doctl && \
    go mod download && \
    CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags="-w -s" -o doctl . && \
    mv doctl /usr/local/bin/doctl && \
    chmod +x /usr/local/bin/doctl && \
    cd / && \
    rm -rf $GOPATH $GOCACHE

# Clean up Go installation after building doctl
RUN rm -rf /usr/local/go

# Install Terraform 1.12.2
RUN wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg && \
    echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | tee /etc/apt/sources.list.d/hashicorp.list && \
    apt-get update && \
    apt-get install -y terraform=1.12.2-1 && \
    rm -rf /var/lib/apt/lists/*

# Install PostgreSQL client and Redis tools
RUN apt-get update && \
    apt-get install -y postgresql-client redis-tools && \
    rm -rf /var/lib/apt/lists/*

# Install Docker CLI v28.3.3+ (Security Update - fixes CVE-2025-54388)
RUN curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg && \
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null && \
    apt-get update && \
    apt-get install -y docker-ce-cli=5:28.3.3-1~ubuntu.22.04~jammy && \
    rm -rf /var/lib/apt/lists/*

# Install GitHub CLI
RUN curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg && \
    chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg && \
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null && \
    apt-get update && \
    apt-get install gh -y && \
    rm -rf /var/lib/apt/lists/*

# Install Go 1.24.6 for building kubeconform from source (fixes CVE-2025-22874)
RUN wget https://go.dev/dl/go1.24.6.linux-amd64.tar.gz && \
    tar -C /usr/local -xzf go1.24.6.linux-amd64.tar.gz && \
    rm go1.24.6.linux-amd64.tar.gz

# Set Go environment variables for kubeconform build
ENV PATH=$PATH:/usr/local/go/bin
ENV GOPATH=/tmp/go-kubeconform
ENV GOCACHE=/tmp/go-kubeconform-cache

# Build kubeconform 0.7.0 from source with secure Go 1.24.6+ (fixes CVE-2025-22874)
RUN mkdir -p /tmp/kubeconform-build && \
    cd /tmp/kubeconform-build && \
    git clone --depth 1 --branch v0.7.0 https://github.com/yannh/kubeconform.git && \
    cd kubeconform && \
    go mod download && \
    CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags="-w -s" -o kubeconform ./cmd/kubeconform && \
    mv kubeconform /usr/local/bin/kubeconform && \
    chmod +x /usr/local/bin/kubeconform && \
    cd / && \
    rm -rf /tmp/kubeconform-build

# Clean up Go installation after building kubeconform
RUN rm -rf /usr/local/go

# Install Go 1.24.6 for building security tools from source (fixes CVE-2025-47907)
RUN wget https://go.dev/dl/go1.24.6.linux-amd64.tar.gz && \
    tar -C /usr/local -xzf go1.24.6.linux-amd64.tar.gz && \
    rm go1.24.6.linux-amd64.tar.gz

# Set Go environment variables
ENV PATH=$PATH:/usr/local/go/bin
ENV GOPATH=/tmp/go
ENV GOCACHE=/tmp/go-cache

# Build kubesec 2.14.2 from source with secure Go 1.24.6+ (fixes CVE-2025-22869 & CVE-2024-45337)
# This ensures the latest golang.org/x/crypto/ssh packages are used
RUN mkdir -p $GOPATH/src && \
    cd $GOPATH/src && \
    git clone --depth 1 --branch v2.14.2 https://github.com/controlplaneio/kubesec.git && \
    cd kubesec && \
    go get -u golang.org/x/crypto@latest && \
    go mod tidy && \
    go mod download && \
    CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags="-w -s" -o kubesec . && \
    mv kubesec /usr/local/bin/kubesec && \
    chmod +x /usr/local/bin/kubesec && \
    cd / && \
    rm -rf $GOPATH $GOCACHE

# Clean up Go installation after building kubesec
RUN rm -rf /usr/local/go

# Reinstall Go 1.24.6 for building Trivy from source (fixes CVE-2025-8959)
RUN wget https://go.dev/dl/go1.24.6.linux-amd64.tar.gz && \
    tar -C /usr/local -xzf go1.24.6.linux-amd64.tar.gz && \
    rm go1.24.6.linux-amd64.tar.gz

# Set Go environment variables for Trivy build
ENV PATH=$PATH:/usr/local/go/bin
ENV GOPATH=/tmp/go-trivy
ENV GOCACHE=/tmp/go-trivy-cache

# Build Trivy from source with go-getter v1.7.9+ security fix (fixes CVE-2025-8959)
# Using latest stable release with updated dependencies
RUN mkdir -p $GOPATH/src && \
    cd $GOPATH/src && \
    git clone https://github.com/aquasecurity/trivy.git && \
    cd trivy && \
    git checkout $(git describe --tags $(git rev-list --tags --max-count=1)) && \
    go get -u github.com/hashicorp/go-getter@v1.7.9 && \
    go mod tidy && \
    go mod download && \
    CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags="-w -s" -o trivy ./cmd/trivy && \
    mv trivy /usr/local/bin/trivy && \
    chmod +x /usr/local/bin/trivy && \
    cd / && \
    rm -rf $GOPATH $GOCACHE

# Clean up Go installation after building Trivy
RUN rm -rf /usr/local/go

# Install Docker buildx 0.27.0 (pre-built binary - released August 2025, built with secure Go version)
RUN wget https://github.com/docker/buildx/releases/download/v0.27.0/buildx-v0.27.0.linux-amd64 && \
    chmod +x buildx-v0.27.0.linux-amd64 && \
    mv buildx-v0.27.0.linux-amd64 /usr/local/bin/docker-buildx && \
    mkdir -p /usr/local/lib/docker/cli-plugins && \
    cp /usr/local/bin/docker-buildx /usr/local/lib/docker/cli-plugins/docker-buildx

# Install Python development tools
RUN python3.13 -m pip install --no-cache-dir \
    black flake8 mypy ruff pytest pytest-cov \
    requests boto3 pyyaml

# Clean up installation files and caches
RUN apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Clean kubectl config to ensure no inherited contexts
RUN rm -rf /root/.kube /home/runner/.kube

# Create empty .kube directories with proper permissions
RUN mkdir -p /home/runner/.kube && \
    chown -R runner:runner /home/runner/.kube

# Switch back to runner user
USER runner

# Set working directory
WORKDIR /home/runner

# Ensure KUBECONFIG points to user's directory (will be empty)
ENV KUBECONFIG=/home/runner/.kube/config

# Create entrypoint script to ensure clean kubectl state
RUN echo '#!/bin/bash\n\
# Clear any kubectl context that might be inherited\n\
unset KUBERNETES_SERVICE_HOST\n\
unset KUBERNETES_SERVICE_PORT\n\
unset KUBERNETES_PORT\n\
unset KUBERNETES_PORT_443_TCP\n\
unset KUBERNETES_SERVICE_PORT_HTTPS\n\
unset KUBERNETES_PORT_443_TCP_ADDR\n\
unset KUBERNETES_PORT_443_TCP_PORT\n\
unset KUBERNETES_PORT_443_TCP_PROTO\n\
# Remove any config that might have been mounted\n\
rm -rf /home/runner/.kube/config\n\
# Execute the original runner script\n\
exec /home/runner/run.sh "$@"' > /home/runner/entrypoint.sh && \
    chmod +x /home/runner/entrypoint.sh

# ARC expects this to be the default CMD
CMD ["/home/runner/entrypoint.sh"]